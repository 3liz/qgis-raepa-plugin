# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Raepa
                                 A QGIS plugin
 France only - Plugin dedicated to import and manage water network data by using Raepa standard
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-12-19
        copyright            : (C) 2018 by 3liz
        email                : info@3liz.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = '3liz'
__date__ = '2018-12-19'
__copyright__ = '(C) 2018 by 3liz'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from PyQt5.QtCore import (
    QCoreApplication,
    QSettings
)

from qgis.core import (
    QgsProcessing,
    QgsProcessingAlgorithm,
    QgsProcessingUtils,
    QgsProcessingException,
    QgsProcessingParameterString,
    QgsProcessingParameterVectorLayer,
    QgsProcessingOutputString
)
import os

class RaepaImportShapefileAlgorithm(QgsProcessingAlgorithm):
    """
    Import Shapefile into imports schema
    """

    CONNECTION_NAME = 'CONNECTION_NAME'
    APPAREILS = 'APPAREILS'
    CANALISATIONS = 'CANALISATIONS'
    OUVRAGES = 'OUVRAGES'
    OUTPUT_STRING = 'OUTPUT_STRING'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        # INPUTS
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.APPAREILS, self.tr('Appareils'),
                optional=False
            )
        )
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.CANALISATIONS, self.tr('Canalisations'),
                optional=False
            )
        )
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.OUVRAGES, self.tr('Ouvrages'),
                optional=False
            )
        )

        # OUTPUTS
        self.addOutput(
            QgsProcessingOutputString(
                self.OUTPUT_STRING, self.tr('Output message')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        import processing
        plugin_dir = os.path.dirname(os.path.abspath(__file__))
        Database = None
        a = self.getConnections()
        if parameters[self.CONNECTION_NAME] in a:
            Database = a.index(Connexion_PostgreSQL)

        if not Database:
            QgsProcessingException('Database connection %s does not exists' % parameters[self.CONNECTION_NAME])

        # Ouvrages
        feedback.pushInfo('Import ouvrages')
        ouvrages_conversion = processing.runalg(
            'qgis:importintopostgis',
            parameters[self.OUVRAGES],
            Database,
            'imports',
            'gabarit_ouvrages',
            None, # primary key
            'geom',
            'UTF-8',
            True, # overwrite
            True, # create index
            True, # convert field name to lowercase
            True, # drop string length
            True # force singlepart
        )
        feedback.pushInfo('Import ouvrages - OK')

        # Appareils
        feedback.pushInfo('Import appareils')
        appareil_conversion = processing.runalg(
            'qgis:importintopostgis',
            parameters[self.APPAREILS],
            Database,
            'imports',
            'gabarit_appareils',
            None, # primary key
            'geom',
            'UTF-8',
            True, # overwrite
            True, # create index
            True, # convert field name to lowercase
            True, # drop string length
            True # force singlepart
        )
        feedback.pushInfo('Import appareils - OK')

        # Canalisations
        feedback.pushInfo('Import canalisations')
        canalisation_conversion = processing.runalg(
            'qgis:importintopostgis',
            parameters[self.CANALISATIONS],
            Database,
            'imports',
            'gabarit_canalisations',
            None, # primary key
            'geom',
            'UTF-8',
            True, # overwrite
            True, # create index
            True, # convert field name to lowercase
            True, # drop string length
            True # force singlepart
        )
        feedback.pushInfo('Import canalisations - OK')

        return {
            self.OUTPUT_STRING: 'Import OK'
        }


    # Get database connection index
    def getConnections(self):
        s = QSettings()
        s.beginGroup("PostgreSQL/connections")
        currentConnections = s.childGroups()
        s.endGroup()
        return currentConnections

    def name(self):
        return 'raepa_import_shapefile'

    def displayName(self):
        return self.tr('01 Importer les gabarits dans le schema imports')

    def group(self):
        return self.tr('Import')

    def groupId(self):
        return 'raepa_import'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return RaepaImportShapefileAlgorithm()
